<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[georglind.dk]]></title>
  <link href="http://georglind.github.dk/atom.xml" rel="self"/>
  <link href="http://georglind.github.dk/"/>
  <updated>2013-07-29T18:41:55+02:00</updated>
  <id>http://georglind.github.dk/</id>
  <author>
    <name><![CDATA[Kim G. L. Pedersen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Improve your ssh-foo: Quick way to bridge multiple ssh-servers]]></title>
    <link href="http://georglind.github.dk/blog/2013/07/29/improve-your-ssh-foo-how-to-seamlessly-cross-through-multiple-ssh-servers/"/>
    <updated>2013-07-29T18:10:00+02:00</updated>
    <id>http://georglind.github.dk/blog/2013/07/29/improve-your-ssh-foo-how-to-seamlessly-cross-through-multiple-ssh-servers</id>
    <content type="html"><![CDATA[<p>While I work from my trustworthy Macbook Pro, everything in this tutorial should translate easily to any Unix-variant OS. </p>

<p>This document explains how to access a ssh-enabled server by using another server as <strong>a bridge</strong>. This may be relevant if you must access server <strong>S2</strong>, say, in order to to carry out some calculations, but <strong>S2</strong> is only connected to a university network <strong>S1</strong>. From your home computer you would have to first ssh into <strong>S1</strong> and then ssh into <strong>S2</strong>. This quickly becomes messy, when you wish to do anything remotely complicated like transferring files between different machines.</p>

<p>In the end of this tutorial you should be able to simply write <code>ssh S2</code>. And then end up immediately in <strong>S2</strong>. Similarly you can use any ssh-based technology like the terminal-based <code>scp S2:file .</code>, or drag-and-drop based solutions like MacFusion without ever thinking about the complicated to stage ssh-connection.</p>

<h2 id="prerequisites">Prerequisites</h2>

<p>The ssh program must of course be installed on both home computer and both servers, and publickey authentication must be enabled.</p>

<p>You also need server names, usernames and passwords for both servers <strong>S1</strong> and <strong>S2</strong>.</p>

<h2 id="set-up-password-less-login">Set up password-less login</h2>

<p>Generate public keys on your home computer, by issuing the command:</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>Leave everything blank. If you wish, you can generate different keys for logging into <strong>S1</strong> and <strong>S2</strong>, and in that case you should save the keys in different files likes <code>id1_rsa</code> and <code>id2_rsa.</code></p>

<p>Move the generated keys to the server:</p>

<pre><code>scp ~/.ssh/id_rsa.pub username1@S1:id_rsa.pub
</code></pre>

<p>Create the <code>.ssh</code> directory and append the key to the <code>authorized_keys</code> file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ssh username1@S1                            <span class="c"># access S1</span>
</span><span class="line">mkdir -p ~/.ssh                             <span class="c"># create .ssh directory</span>
</span><span class="line">touch ~/.ssh/authorized_keys                <span class="c"># create file</span>
</span><span class="line">chmod 644 ~/.ssh/authorized_keys            <span class="c"># give correct permissions</span>
</span><span class="line">cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys    <span class="c"># add public-key to file</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Repeat this procedure for <strong>S2</strong>, making sure to move the relevant files all the way through <strong>S1</strong> first. Remember to delete the <code>id_rsa.pub</code> file after you have added it to the <code>authorized_keys</code> file. </p>

<pre><code>rm id_rsa.pub
</code></pre>

<p>You should then be able to log in to <strong>S1</strong> from your home computer without using your password. Test that this work seamlessly before moving on.</p>

<h2 id="on-your-computer">On your computer</h2>

<p>Create <code>~/.ssh/config</code> file to manage your connections. In the config file you should put the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Host S1nick
</span><span class="line">    Hostname S1
</span><span class="line">    port 22
</span><span class="line">    PreferredAuthentications publickey
</span><span class="line">    IdentityFile ~/.ssh/id1_rsa
</span><span class="line">    User username1
</span><span class="line">
</span><span class="line">Host S2nick
</span><span class="line">    HostName S2
</span><span class="line">    port 22
</span><span class="line">    PreferredAuthentications publickey
</span><span class="line">    IdentityFile ~/.ssh/id2_rsa
</span><span class="line">    User username2
</span><span class="line">    ProxyCommand ssh -A S1nick nc %h %p
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The variables <strong>S1nick</strong> and <strong>S2nick</strong> are some short nick names for the two servers. This is convenient because servernames tend to be long and tedious to type. If you are using a university network you could e.g. set <strong>S1nick</strong> to “uni” and <strong>S2nick</strong> to “calc”.</p>

<p>Now you can access <strong>S1</strong> with the command</p>

<pre><code>ssh S1nick
</code></pre>

<p>And server <strong>S2</strong> with,</p>

<pre><code>ssh S2nick
</code></pre>

<p>Voila!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-referential first post: Why the first post exists]]></title>
    <link href="http://georglind.github.dk/blog/2013/04/08/self-referential-first-post-why-the-first-post-exists/"/>
    <updated>2013-04-08T23:28:00+02:00</updated>
    <id>http://georglind.github.dk/blog/2013/04/08/self-referential-first-post-why-the-first-post-exists</id>
    <content type="html"><![CDATA[<p>Welcome to the first post. If you read this retrospectively in a world where this is no longer the first post… Then I am sorry to inform you that you have reached the end of this blog archive. Feel free to be sad or move along to something more meaningful.</p>

<p>If you indeed happened upon this blog in its infancy, when this is the only post… Then I am sorry to inform you that there are no more posts, and this post is also quite boring. Move along, nothing to see here.  </p>

<p>To really get started with this first post I would like to entertain you with some bits and pieces of homespun philosophy:</p>

<ul>
  <li>In the beginning of a project, simply starting is the most difficult part you have encountered so far. Many projects die even before they begin.</li>
  <li>Doing something while you are still not very good at it, is an important trait of the young enrepreneur. A trait I hope to have advertised quite perfectly with this first post. </li>
  <li>If the beginning was the best part of the project, you have clearly done something wrong. While this should not be an encouragement to start in the crappiest possible way… It is an encouragement not to worry too much about crap in the beginning. It gets better (hopefully).</li>
  <li>Writing is the invention which have made the biggest impact on human history. Period. Just  writing ideas down make them double their value. Documenting your daily life, thoughts and reasoning is the single most inspiring and productive thing you can do.  </li>
  <li>Do not try to apply the above reasoning to anything profound… like e.g. the Bible where the beginning really do represent the pinnacle of human niceness.  </li>
  <li>Homespun philosophy is really only the work of drunk or bored people. And of little interest to anyone at all. Do not divulge yourself in reading other peoples ramblings. Simply don’t.</li>
</ul>

<p>Having started on this rather silly note… Allow me to contrast with a very serious picture of me:</p>

<p><img class="center" src="http://georglind.github.dk/files/trashmonster.jpg" width="400" /></p>

<p>I am a physicist by education, and the blood of the natural sciences runs deep in my veins. However, as a scout I have flirted quite a bit with project management, leadership and administration. </p>

<p>I have a strange fascination with writing computer code. I have been told that my grandfather – who was an engineer using early mainframe computers – could suddenly stop whatever he was doing, and then try to solve a computer problem for hours before returning to the task at hand… like eating or clothing. I do not think I have inherited that character flaw, but the fascination is definitely there. </p>

<p>I also have a small family. My girlfirend and I have a 2-year old daughter, which in the most wonderful way takes up most of our spare time.  </p>

<p>I tell you all this to warn you that any subsequent posts are probably going to center around the four themes: Physics, Scouting, Programming and Parenting. In what proportions these themes will feature, I am not quite sure as of yet. </p>

<p>To finish this post let me tell you the reason for actually writing this blog. It is in fact somewhat lame (as is the reasons for most real world projects). So let me divulge you in my lameness: </p>

<p>I used to have a static html homepage which mainly hosted my wish-list. I then stumbled upon <a href="http://octopress.org">Octopress</a> which works by compiling all posts to static content, and in my case serves it to you via github. I became fascinated with the setup and one sleepless night later my old site was migrated to Octopress. The blog was baked into Octopress, but I do not know why I did not remove it then.</p>

<p>Over time I got annoyed with the empty homepage… so slowly, in the back of my brain, I began to consider the possibility of actually writing a blog… and this night then just happened to be the time where this possibility was violently born into the world as a fact… </p>

<p>I know that this is quite a silly first post, and I do apologize. Instead I hope that you may value the incoherent and silly character of this piece. I believe when pushing a text towards the incoherent and rambling, there is a turning point where meaning will change and suddenly the test makes sense on a completely new level and in a completely new way.</p>

<p>If not then hopefully the post is silly enough to force me to quickly write more posts to cover this up… </p>

<p>See you later.</p>
]]></content>
  </entry>
  
</feed>
